openapi: 3.0.0
info:
  title: DSG Backend API
  version: 1.1.0
  description: Full API documentation for the DSG Backend (Tunisian marketplace)
servers:
  - url: http://localhost:5010
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegister:
      type: object
      properties:
        name: { type: string }
        mobile: { type: string }
        password: { type: string }
        email: { type: string }
        address: { type: string }
        role: { type: string }
      required: [name, mobile, password]
    UserLogin:
      type: object
      properties:
        mobile: { type: string }
        password: { type: string }
      required: [mobile, password]
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        mobile: { type: string }
        email: { type: string }
        role: { type: string }
        address: { type: string }
    TaxCreate:
      type: object
      properties:
        name: { type: string }
        rate: { type: number }
        code: { type: string }
        description: { type: string }
        active: { type: boolean }
        type: { type: string }
      required: [name, rate, code]
    Tax:
      allOf:
        - $ref: "#/components/schemas/TaxCreate"
        - type: object
          properties:
            id: { type: string }
    ProductCreate:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        price: { type: number }
        stock: { type: number }
        category: { type: string }
        additionalCategories:
          type: array
          items: { type: string }
        image: { type: string }
        tax: { type: string }
      required: [name, price, category, tax]
    Product:
      allOf:
        - $ref: "#/components/schemas/ProductCreate"
        - type: object
          properties:
            id: { type: string }
    CategoryCreate:
      type: object
      properties:
        name: { type: string }
        parent: { type: string }
      required: [name]
    Category:
      allOf:
        - $ref: "#/components/schemas/CategoryCreate"
        - type: object
          properties:
            id: { type: string }
    CategoryTree:
      allOf:
        - $ref: "#/components/schemas/Category"
        - type: object
          properties:
            children:
              type: array
              items:
                $ref: "#/components/schemas/CategoryTree"
    OrderProduct:
      type: object
      properties:
        product: { type: string }
        quantity: { type: number }
        price: { type: number }
    OrderCreate:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderProduct"
        address: { type: string }
        store: { type: string }
      required: [products]
    Order:
      type: object
      properties:
        id: { type: string }
        store: { type: string }
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderProduct"
        total: { type: number }
        status: { type: string }
        assignedTo: { type: string }
        paymentMethod: { type: string }
        cancellationReason: { type: string }
        statusHistory:
          type: array
          items:
            type: object
            properties:
              status: { type: string }
              changedBy: { type: string }
              changedAt: { type: string, format: date-time }
        address: { type: string }
    InvoiceUpdate:
      type: object
      properties:
        status: { type: string }
        paidAt: { type: string, format: date-time }
        sentAt: { type: string, format: date-time }
    Invoice:
      type: object
      properties:
        id: { type: string }
        order: { type: string }
        invoiceNumber: { type: string }
        issuedAt: { type: string, format: date-time }
        paidAt: { type: string, format: date-time }
        sentAt: { type: string, format: date-time }
        status: { type: string }
        products:
          type: array
          items:
            type: object
            properties:
              product: { type: string }
              name: { type: string }
              quantity: { type: number }
              price: { type: number }
              tax:
                type: object
                properties:
                  id: { type: string }
                  name: { type: string }
                  rate: { type: number }
              taxAmount: { type: number }
              total: { type: number }
        subtotal: { type: number }
        totalTax: { type: number }
        total: { type: number }
        customer:
          type: object
          properties:
            id: { type: string }
            name: { type: string }
            email: { type: string }
            address: { type: string }
    Message:
      type: object
      properties:
        id: { type: string }
        sender: { type: string }
        receiver: { type: string }
        content: { type: string }
        timestamp: { type: string, format: date-time }
        order: { type: string }

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201": { description: User registered successfully }
        "400": { description: Validation error }
        "409": { description: Mobile already registered }
  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200": { description: Login successful }
        "401": { description: Invalid credentials }
  /api/products:
    get:
      summary: Get all products
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Create a new product (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400": { description: Validation error }
  /api/products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404": { description: Product not found }
    put:
      summary: Update product (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404": { description: Product not found }
    delete:
      summary: Delete product (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": { description: Product deleted }
        "404": { description: Product not found }
  /api/taxes:
    get:
      summary: Get all taxes
      responses:
        "200":
          description: List of taxes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tax"
    post:
      summary: Create a new tax (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaxCreate"
      responses:
        "201":
          description: Tax created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tax"
        "400": { description: Validation error }
  /api/taxes/{id}:
    get:
      summary: Get tax by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Tax details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tax"
        "404": { description: Tax not found }
    put:
      summary: Update tax (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaxCreate"
      responses:
        "200":
          description: Tax updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tax"
        "404": { description: Tax not found }
    delete:
      summary: Delete tax (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": { description: Tax deleted }
        "404": { description: Tax not found }
  /api/invoices:
    get:
      summary: List all invoices (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invoice"
  /api/invoices/{id}:
    get:
      summary: Get invoice by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "404": { description: Invoice not found }
    put:
      summary: Update invoice (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceUpdate"
      responses:
        "200":
          description: Invoice updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "404": { description: Invoice not found }
    delete:
      summary: Delete invoice (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": { description: Invoice deleted }
        "404": { description: Invoice not found }
  /api/orders:
    post:
      summary: Place a new order (store only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: Order placed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400": { description: Validation error }
    get:
      summary: Get all orders (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /api/orders/{orderId}/invoice:
    get:
      summary: Get invoice by order ID (admin or assigned delivery, delivered only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "403": { description: Not authorized }
        "404": { description: Invoice not found }
  /api/users:
    get:
      summary: List all users (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /api/users/{id}:
    get:
      summary: Get user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404": { description: User not found }
    put:
      summary: Update user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404": { description: User not found }
    delete:
      summary: Delete user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": { description: User deleted }
        "404": { description: User not found }

  /api/reviews:
    post:
      summary: Create or update a review for a product (authenticated)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: { type: string }
                rating: { type: number }
      responses:
        "201":
          description: Review created/updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  product: { type: string }
                  user: { type: string }
                  rating: { type: number }

  /api/products/{id}/reviews:
    get:
      summary: Get all reviews for a product
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: List of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
                  average: { type: number }
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        user: { type: string }
                        rating: { type: number }

  /api/messages/store/delivery:
    post:
      summary: Store sends message to delivery guy (order-based)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId: { type: string }
                content: { type: string }
      responses:
        "201": { description: Message sent }
        "400": { description: Validation or business logic error }

  /api/messages/store/admin:
    post:
      summary: Store sends message to admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
      responses:
        "201": { description: Message sent }
        "400": { description: Validation or business logic error }

  /api/messages/store/support:
    post:
      summary: Store sends message to support
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
      responses:
        "201": { description: Message sent }
        "400": { description: Validation or business logic error }

  /api/messages/delivery/admin:
    post:
      summary: Delivery guy sends message to admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
      responses:
        "201": { description: Message sent }
        "400": { description: Validation or business logic error }

  /api/messages/delivery/delivery:
    post:
      summary: Delivery guy sends message to another delivery
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deliveryId: { type: string }
                content: { type: string }
      responses:
        "201": { description: Message sent }
        "400": { description: Validation or business logic error }

  /api/messages/admin/user:
    post:
      summary: Admin sends message to any user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                content: { type: string }
      responses:
        "201": { description: Message sent }
        "400": { description: Validation or business logic error }

  /api/messages/history/{userId}:
    get:
      summary: Fetch chat history between two users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Chat history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "403": { description: Not allowed to view this chat }

  /api/categories/tree:
    get:
      summary: Get category tree (nested)
      responses:
        "200":
          description: Nested category tree
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryTree"

  /api/categories/{slug}:
    get:
      summary: Get category by slug
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404": { description: Category not found }

  /api/categories/path/{slugPath}:
    get:
      summary: Get category by full slug path (nested)
      parameters:
        - in: path
          name: slugPath
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404": { description: Category not found }

  /api/products/search:
    get:
      summary: Advanced search for products
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Text search query
        - in: query
          name: category
          schema:
            type: string
          description: Category ID to filter
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price
        - in: query
          name: inStock
          schema:
            type: boolean
          description: Only show products in stock
        - in: query
          name: sort
          schema:
            type: string
            enum: [price, name, createdAt]
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Results per page
      responses:
        "200":
          description: Paginated, filtered, and sorted list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  page: { type: integer }
                  pageSize: { type: integer }
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"

  /api/products/advancedSearch:
    get:
      summary: Alias for advanced search for products
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
        - in: query
          name: inStock
          schema:
            type: boolean
        - in: query
          name: sort
          schema:
            type: string
            enum: [price, name, createdAt]
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Paginated, filtered, and sorted list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  page: { type: integer }
                  pageSize: { type: integer }
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"

  /api/products/category/{parentCategoryId}/products:
    get:
      summary: Get all products under a parent category (including descendants)
      parameters:
        - in: path
          name: parentCategoryId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /api/products/category/{parentCategoryIdOrSlug}/products/fast:
    get:
      summary: Fast single-query for products under a parent category
      parameters:
        - in: path
          name: parentCategoryIdOrSlug
          schema:
            type: string
          required: true
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /api/health:
    get:
      summary: Health check endpoint
      responses:
        "200":
          description: Health check OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
